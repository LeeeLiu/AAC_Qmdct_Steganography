

### Qmdct隐写中，三种失真函数的实现
1. 绝对值/平方
```
	for (sb = 0; sb < coderInfo->nr_of_sfb; sb++)
	{
		 invQuantFac = pow(2.0, -0.25*(coderInfo->scale_factor[sb] - coderInfo->global_gain));
		 start = coderInfo->sfb_offset[sb];
		 end = coderInfo->sfb_offset[sb + 1];

		for (i = start; i < end; i++)
		{
			if (xi[i] == 0){
				fprintf(fp, "%d\tInf\tInf\n", xi[i]);
			}

			else {
				sign = (xr[i] < 0) ? -1 : 1;

				requant_xr[i] = sign * pow43[abs(xi[i] - 1)] * invQuantFac;
				cost = pow(fabs(xr[i] - requant_xr[i]), 2.0);     // cost of changing pixel by -1				
				costs[2 * i + 0] = (cost >= FLT_MAX) ? FLT_MAX : cost;

				//printf("\n%f", xr[i]-requant_xr[i]);

				requant_xr[i] = sign * pow43[abs(xi[i] + 1)] * invQuantFac;
				cost = pow(fabs(xr[i] - requant_xr[i]), 2.0);      // cost of changing pixel by +1
				costs[2 * i + 1] = (cost >= FLT_MAX) ? FLT_MAX : cost;

				fprintf(fp, "%d\t%f\t%f\n", xi[i], costs[2 * i + 0], costs[2 * i + 1]);
			}
		}
	}
```
2. xmin分情况：
```
//*
	for (sb = 0; sb < coderInfo->nr_of_sfb; sb++)
	{
		invQuantFac = pow(2.0, -0.25*(coderInfo->scale_factor[sb] - coderInfo->global_gain));
		start = coderInfo->sfb_offset[sb];
		end = coderInfo->sfb_offset[sb + 1];

		for (i = start; i < end; i++)
		{
			if (xi[i] == 0){
				fprintf(fp, "%d\tInf\tInf\n", xi[i]);
			}

			else {
				diffvol = 0.0;//-1
				for (j = start; j < end; j++)
				{
					if (j == i)		xi[j] -= 1;

					tmp = xi[j];
					diffvol += tmp * tmp;
				}
				if (diffvol < 1e-6)		diffvol = 1e-6;
				tmp = pow(diffvol / (double)(end - start), -0.666);

				if (tmp > xmin[sb])
				{
					sign = (xr[i] < 0) ? -1 : 1;
					requant_xr[i] = sign * pow43[abs(xi[i] - 1)] * invQuantFac;
					cost = pow(fabs(xr[i] - requant_xr[i]), 2.0);     // cost of changing pixel by -1				
					costs[2 * i + 0] = (cost >= FLT_MAX) ? FLT_MAX : cost;
				}
				else{
					costs[2 * i + 0] = 0.01;
				}//-1

				diffvol = 0.0;//+1
				for (j = start; j < end; j++)
				{
					if (j == i)		xi[j] += 1;

					tmp = xi[j];
					diffvol += tmp * tmp;
				}
				if (diffvol < 1e-6)		diffvol = 1e-6;
				tmp = pow(diffvol / (double)(end - start), -0.666);

				if (tmp > xmin[sb])
				{
					sign = (xr[i] < 0) ? -1 : 1;
					requant_xr[i] = sign * pow43[abs(xi[i] + 1)] * invQuantFac;
					cost = pow(fabs(xr[i] - requant_xr[i]), 2.0);     // cost of changing pixel by +1				
					costs[2 * i + 1] = (cost >= FLT_MAX) ? FLT_MAX : cost;
				}
				else{
					costs[2 * i + 1] = 0.01;
				}//+1								
				fprintf(fp, "%d\t%f\t%f\n", xi[i], costs[2 * i + 0], costs[2 * i + 1]);
			}
		}
	}
	//*/
```
3. Tf （去掉平方 测）
```
/*
	for (sb = 0; sb < coderInfo->nr_of_sfb; sb++)
	{
		start = coderInfo->sfb_offset[sb];
		end = coderInfo->sfb_offset[sb + 1];

		for (j = start; j < end; j++)
		{
			if (xi[j] != 0)	break;
		}

		if (j == end)
		{
			for (j = start; j < end; j++)
				fprintf(fp, "%d\tInf\tInf\n", xi[j]);
		}
		else{
			for (j = start; j < end; j++)
			{
				f[j] = (j + 1)*(44.1 / 1024);
				T[j] = 3.64*pow(f[j], -0.8) - 6.5*exp(-0.6*(f[j] - 3.3)*(f[j] - 3.3)) + 0.001*pow(f[j], 4);
				log = log10(T[j] + 6); //原本是log2
				cost = pow(1 / log, 2.0); //原本没有平方

				fprintf(fp, "%d\t%f\t%f\n", xi[j], cost, cost);
			}
		}

	}//*/
```
